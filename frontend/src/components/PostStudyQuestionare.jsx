import React, { useState } from 'react';
import { ChevronDown, ChevronUp } from 'lucide-react';
import axios from 'axios';

const PostStudyQuestionnaire = ({ user, onComplete }) => {
  const [responses, setResponses] = useState({});
  const [expandedSections, setExpandedSections] = useState({
    overall: true,
    gpt4o: false,
    claude: false,
    comparison: false,
    tasks: false,
    interface: false,
    additional: false
  });
  const [isSubmitting, setIsSubmitting] = useState(false);
  const [currentStep, setCurrentStep] = useState(0);

  const sections = [
    {
      id: 'overall',
      title: 'Overall Experience',
      questions: [
        {
          id: 'overall_satisfaction',
          question: 'How satisfied are you with your overall experience in this study?',
          type: 'likert',
          scale: ['Very Dissatisfied', 'Dissatisfied', 'Neutral', 'Satisfied', 'Very Satisfied']
        },
        {
          id: 'study_clear',
          question: 'How clear were the task instructions?',
          type: 'likert',
          scale: ['Very Unclear', 'Unclear', 'Neutral', 'Clear', 'Very Clear']
        },
        {
          id: 'time_sufficient',
          question: 'Was the time sufficient to complete the tasks?',
          type: 'likert',
          scale: ['Not at all', 'Barely sufficient', 'Adequate', 'More than enough', 'Too much time']
        }
      ]
    },
    {
      id: 'gpt4o',
      title: 'GPT-4o Experience',
      questions: [
        {
          id: 'gpt4o_text_quality',
          question: 'How would you rate the quality of GPT-4o\'s text responses?',
          type: 'likert',
          scale: ['Very Poor', 'Poor', 'Fair', 'Good', 'Excellent']
        },
        {
          id: 'gpt4o_image_quality',
          question: 'How would you rate the quality of images generated by GPT-4o (DALL-E 3)?',
          type: 'likert',
          scale: ['Very Poor', 'Poor', 'Fair', 'Good', 'Excellent']
        },
        {
          id: 'gpt4o_helpfulness',
          question: 'How helpful was GPT-4o in completing your tasks?',
          type: 'likert',
          scale: ['Not at all helpful', 'Slightly helpful', 'Moderately helpful', 'Very helpful', 'Extremely helpful']
        },
        {
          id: 'gpt4o_understanding',
          question: 'How well did GPT-4o understand your requests?',
          type: 'likert',
          scale: ['Very Poorly', 'Poorly', 'Adequately', 'Well', 'Very Well']
        },
        {
          id: 'gpt4o_feedback',
          question: 'What did you like most about GPT-4o? What could be improved?',
          type: 'textarea',
          placeholder: 'Please share your thoughts about GPT-4o...'
        }
      ]
    },
    {
      id: 'claude',
      title: 'Claude Sonnet 4 Experience',
      questions: [
        {
          id: 'claude_text_quality',
          question: 'How would you rate the quality of Claude Sonnet 4\'s text responses?',
          type: 'likert',
          scale: ['Very Poor', 'Poor', 'Fair', 'Good', 'Excellent']
        },
        {
          id: 'claude_helpfulness',
          question: 'How helpful was Claude Sonnet 4 in completing your tasks?',
          type: 'likert',
          scale: ['Not at all helpful', 'Slightly helpful', 'Moderately helpful', 'Very helpful', 'Extremely helpful']
        },
        {
          id: 'claude_understanding',
          question: 'How well did Claude Sonnet 4 understand your requests?',
          type: 'likert',
          scale: ['Very Poorly', 'Poorly', 'Adequately', 'Well', 'Very Well']
        },
        {
          id: 'claude_feedback',
          question: 'What did you like most about Claude Sonnet 4? What could be improved?',
          type: 'textarea',
          placeholder: 'Please share your thoughts about Claude Sonnet 4...'
        }
      ]
    },
    {
      id: 'comparison',
      title: 'AI Comparison',
      questions: [
        {
          id: 'preferred_ai_text',
          question: 'For text-based tasks, which AI did you prefer?',
          type: 'radio',
          options: ['GPT-4o', 'Claude Sonnet 4', 'No preference', 'Depends on the task']
        },
        {
          id: 'preferred_ai_overall',
          question: 'Overall, which AI did you prefer working with?',
          type: 'radio',
          options: ['GPT-4o', 'Claude Sonnet 4', 'No preference']
        },
        {
          id: 'ai_differences',
          question: 'What were the main differences you noticed between the two AIs?',
          type: 'textarea',
          placeholder: 'Please describe the differences you observed...'
        },
        {
          id: 'switching_frequency',
          question: 'How often did you switch between the two AIs during tasks?',
          type: 'radio',
          options: ['Never', 'Rarely', 'Sometimes', 'Often', 'Very frequently']
        }
      ]
    },
    {
      id: 'tasks',
      title: 'Task-Specific Feedback',
      questions: [
        {
          id: 'image_limit_impact',
          question: 'How did the 5-image limit per task affect your experience?',
          type: 'likert',
          scale: ['Very negatively', 'Negatively', 'No impact', 'Positively', 'Very positively']
        },
        {
          id: 'image_limit_sufficient',
          question: 'Was the 5-image limit sufficient for completing image-related tasks?',
          type: 'radio',
          options: ['Not enough', 'Barely sufficient', 'Just right', 'More than needed']
        },
        {
          id: 'most_challenging_task',
          question: 'Which type of task did you find most challenging?',
          type: 'radio',
          options: ['Text-based tasks', 'Image generation tasks', 'Mixed tasks', 'None were particularly challenging']
        },
        {
          id: 'task_variety',
          question: 'How would you rate the variety of tasks in this study?',
          type: 'likert',
          scale: ['Too repetitive', 'Somewhat repetitive', 'Just right', 'Good variety', 'Excellent variety']
        }
      ]
    },
    {
      id: 'interface',
      title: 'Interface & Usability',
      questions: [
        {
          id: 'interface_ease',
          question: 'How easy was it to use the chat interface?',
          type: 'likert',
          scale: ['Very difficult', 'Difficult', 'Neutral', 'Easy', 'Very easy']
        },
        {
          id: 'ai_switching',
          question: 'How easy was it to switch between different AIs?',
          type: 'likert',
          scale: ['Very difficult', 'Difficult', 'Neutral', 'Easy', 'Very easy']
        },
        {
          id: 'task_navigation',
          question: 'How easy was it to navigate between different tasks?',
          type: 'likert',
          scale: ['Very difficult', 'Difficult', 'Neutral', 'Easy', 'Very easy']
        },
        {
          id: 'interface_improvements',
          question: 'What improvements would you suggest for the interface?',
          type: 'textarea',
          placeholder: 'Please suggest any interface improvements...'
        }
      ]
    },
    {
      id: 'additional',
      title: 'Additional Feedback',
      questions: [
        {
          id: 'recommend_study',
          question: 'Would you recommend this study to others?',
          type: 'likert',
          scale: ['Definitely not', 'Probably not', 'Neutral', 'Probably yes', 'Definitely yes']
        },
        {
          id: 'future_ai_use',
          question: 'How likely are you to use AI assistants in the future based on this experience?',
          type: 'likert',
          scale: ['Very unlikely', 'Unlikely', 'Neutral', 'Likely', 'Very likely']
        },
        {
          id: 'general_comments',
          question: 'Any additional comments or suggestions about the study?',
          type: 'textarea',
          placeholder: 'Please share any additional thoughts...'
        },
        {
          id: 'technical_issues',
          question: 'Did you experience any technical issues during the study?',
          type: 'textarea',
          placeholder: 'Please describe any technical problems you encountered...'
        }
      ]
    }
  ];

  const handleResponseChange = (questionId, value) => {
    setResponses(prev => ({
      ...prev,
      [questionId]: value
    }));
  };

  const toggleSection = (sectionId) => {
    setExpandedSections(prev => ({
      ...prev,
      [sectionId]: !prev[sectionId]
    }));
  };

  const handleSubmit = async () => {
    setIsSubmitting(true);
    try {
      await axios.post('https://api.hmi-ai-prompting.shop/submit-post-study-questionnaire', {
        participant_id: user.participant_id,
        responses: responses
      });
      
      alert('Thank you! Your responses have been submitted successfully.');
      onComplete();
    } catch (error) {
      console.error('Failed to submit questionnaire:', error);
      alert('There was an error submitting your responses. Please try again.');
    } finally {
      setIsSubmitting(false);
    }
  };

  const renderQuestion = (question) => {
    switch (question.type) {
      case 'likert':
        return (
          <div className="space-y-2">
            {question.scale.map((option, index) => (
              <label key={index} className="flex items-center space-x-3 cursor-pointer">
                <input
                  type="radio"
                  name={question.id}
                  value={index + 1}
                  onChange={(e) => handleResponseChange(question.id, parseInt(e.target.value))}
                  className="text-blue-600 focus:ring-blue-500"
                />
                <span className="text-sm">{option}</span>
              </label>
            ))}
          </div>
        );
      
      case 'radio':
        return (
          <div className="space-y-2">
            {question.options.map((option, index) => (
              <label key={index} className="flex items-center space-x-3 cursor-pointer">
                <input
                  type="radio"
                  name={question.id}
                  value={option}
                  onChange={(e) => handleResponseChange(question.id, e.target.value)}
                  className="text-blue-600 focus:ring-blue-500"
                />
                <span className="text-sm">{option}</span>
              </label>
            ))}
          </div>
        );
      
      case 'textarea':
        return (
          <textarea
            placeholder={question.placeholder}
            value={responses[question.id] || ''}
            onChange={(e) => handleResponseChange(question.id, e.target.value)}
            className="w-full p-3 border border-gray-300 rounded-lg focus:outline-none focus:ring-2 focus:ring-blue-500 min-h-24 resize-y"
          />
        );
      
      default:
        return null;
    }
  };

  const getCompletionPercentage = () => {
    const totalQuestions = sections.reduce((sum, section) => sum + section.questions.length, 0);
    const answeredQuestions = Object.keys(responses).length;
    return Math.round((answeredQuestions / totalQuestions) * 100);
  };

  return (
    <div className="min-h-screen bg-gray-50 p-6">
      <div className="max-w-4xl mx-auto">
        <div className="bg-white rounded-lg shadow-lg p-8">
          <div className="text-center mb-8">
            <h1 className="text-3xl font-bold text-gray-800 mb-2">Post-Study Questionnaire</h1>
            <p className="text-gray-600 mb-4">
              Thank you for participating in our AI assistant study, {user?.fullName}! 
              Please share your experience and feedback.
            </p>
            <div className="w-full bg-gray-200 rounded-full h-2">
              <div 
                className="bg-blue-600 h-2 rounded-full transition-all duration-300"
                style={{ width: `${getCompletionPercentage()}%` }}
              ></div>
            </div>
            <p className="text-sm text-gray-500 mt-2">
              Progress: {getCompletionPercentage()}% complete
            </p>
          </div>

          <div className="space-y-6">
            {sections.map((section) => (
              <div key={section.id} className="border border-gray-200 rounded-lg">
                <button
                  onClick={() => toggleSection(section.id)}
                  className="w-full p-4 text-left flex items-center justify-between hover:bg-gray-50 transition-colors"
                >
                  <h2 className="text-lg font-semibold text-gray-800">{section.title}</h2>
                  {expandedSections[section.id] ? (
                    <ChevronUp className="text-gray-500" size={20} />
                  ) : (
                    <ChevronDown className="text-gray-500" size={20} />
                  )}
                </button>
                
                {expandedSections[section.id] && (
                  <div className="p-4 border-t border-gray-200 space-y-6">
                    {section.questions.map((question, index) => (
                      <div key={question.id} className="space-y-3">
                        <label className="block text-sm font-medium text-gray-700">
                          {index + 1}. {question.question}
                          {question.type !== 'textarea' && (
                            <span className="text-red-500 ml-1">*</span>
                          )}
                        </label>
                        {renderQuestion(question)}
                      </div>
                    ))}
                  </div>
                )}
              </div>
            ))}
          </div>

          <div className="mt-8 p-6 bg-gray-50 rounded-lg">
            <div className="flex items-center justify-between">
              <div>
                <p className="text-sm text-gray-600">
                  {Object.keys(responses).length} of {sections.reduce((sum, section) => sum + section.questions.length, 0)} questions answered
                </p>
                <p className="text-xs text-gray-500 mt-1">
                  Optional questions (text areas) can be left blank
                </p>
              </div>
              <button
                onClick={handleSubmit}
                disabled={isSubmitting}
                className="px-8 py-3 bg-blue-600 text-white font-semibold rounded-lg hover:bg-blue-700 disabled:bg-gray-400 disabled:cursor-not-allowed transition-colors flex items-center space-x-2"
              >
                {isSubmitting ? (
                  <>
                    <div className="animate-spin rounded-full h-4 w-4 border-b-2 border-white"></div>
                    <span>Submitting...</span>
                  </>
                ) : (
                  <span>Submit Questionnaire</span>
                )}
              </button>
            </div>
          </div>

          <div className="mt-6 text-center text-sm text-gray-500">
            <p>Your responses are anonymous and will help us improve AI assistant interactions.</p>
          </div>
        </div>
      </div>
    </div>
  );
};

export default PostStudyQuestionnaire;